using System;
using System.Linq;
using cAlgo.API;
using cAlgo.API.Indicators;
using cAlgo.API.Internals;
using cAlgo.Indicators;

namespace cAlgo.Robots
{
    [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
    public class Barsgold : Robot
    {

        IchimokuKinkoHyo ichimoku;

        MovingAverage MA;


        [Parameter(DefaultValue = true)]
        public bool Default_Strategy { get; set; }


        [Parameter(DefaultValue = 0.1)]
        public double volume { get; set; }

        [Parameter(DefaultValue = 50)]
        public double TP { get; set; }
        [Parameter(DefaultValue = 50)]
        public double SL { get; set; }


        [Parameter(DefaultValue = true)]
        public bool ichimokusignal { get; set; }


        [Parameter("Source MA")]
        public DataSeries SourceMA { get; set; }

        [Parameter("Period MA", DefaultValue = 50)]
        public int PMA { get; set; }

        [Parameter("Type MA", DefaultValue = MovingAverageType.Simple)]
        public MovingAverageType TMA { get; set; }



        [Parameter("Only short position")]
        public bool S1 { get; set; }
        [Parameter("S&L fixed distance")]
        public bool S2 { get; set; }
        [Parameter("S&L Updated Trailing stop")]
        public bool S3 { get; set; }
        [Parameter("S&L trailing on MA")]
        public bool S4 { get; set; }

        // 0 for idle 



        protected override void OnStart()
        {
            ichimoku = Indicators.IchimokuKinkoHyo(9, 26, 52);
            MA = Indicators.MovingAverage(SourceMA, PMA, TMA);
        }



        protected override void OnBar()
        {
            if ((Bars.ClosePrices.Last(1) > ichimoku.SenkouSpanA.Last(1) && Bars.ClosePrices.Last(1) < ichimoku.SenkouSpanB.Last(1)) || (Bars.ClosePrices.Last(1) < ichimoku.SenkouSpanA.Last(1) && Bars.ClosePrices.Last(1) > ichimoku.SenkouSpanB.Last(1)))
            {
                ichimokusignal = true;
            }
            if ((Bars.OpenPrices.Last(1) > ichimoku.SenkouSpanA.Last(1) && Bars.OpenPrices.Last(1) < ichimoku.SenkouSpanB.Last(1)) || (Bars.OpenPrices.Last(1) < ichimoku.SenkouSpanA.Last(1) && Bars.OpenPrices.Last(1) > ichimoku.SenkouSpanB.Last(1)))
            {
                ichimokusignal = true;
            }

            var case_1_pos = Positions.FindAll("Case1", SymbolName);

            var case_2_pos = Positions.FindAll("Case2", SymbolName);
            var case_3_pos = Positions.FindAll("Case3", SymbolName);
            var case_4_pos = Positions.FindAll("Case4", SymbolName);


            var case_1_post = Positions.FindAll("Case1t", SymbolName);

            var case_2_post = Positions.FindAll("Case2t", SymbolName);
            var case_3_post = Positions.FindAll("Case3t", SymbolName);
            var case_4_post = Positions.FindAll("Case4t", SymbolName);







            if (case_1_pos.Length > 0)
            {
                foreach (var po in case_1_pos)
                {
                    if (Bars.ClosePrices.Last(1) > Bars.OpenPrices.Last(1))
                    {
                        ClosePosition(po);
                        Print("Bullish close Case1");
                    }
                }
            }

            if (case_2_pos.Length > 0)
            {
                foreach (var po in case_2_pos)
                {
                    if (Bars.ClosePrices.Last(1) > Bars.OpenPrices.Last(1))
                    {
                        ClosePosition(po);
                        Print("Bullish close Case2");
                    }
                }
            }


            if (case_3_pos.Length > 0)
            {
                foreach (var po in case_3_pos)
                {
                    if (Bars.ClosePrices.Last(1) < Bars.OpenPrices.Last(1))
                    {
                        ClosePosition(po);
                        Print("Bearish close Case3");
                    }
                }
            }


            if (case_4_pos.Length > 0)
            {
                foreach (var po in case_4_pos)
                {
                    if (Bars.ClosePrices.Last(1) < Bars.OpenPrices.Last(1))
                    {
                        ClosePosition(po);
                        Print("Bearish close Case4");
                    }
                }
            }

            if (case_1_post.Length > 0)
            {

            }

            if (ichimokusignal && Bars.ClosePrices.Last(1) > ichimoku.SenkouSpanA.Last(1) && Bars.ClosePrices.Last(1) > ichimoku.SenkouSpanB.Last(1) && Bars.ClosePrices.Last(1) > Bars.OpenPrices.Last(1) && Bars.HighPrices.Last(1) > Bars.HighPrices.Last(2) && Bars.LowPrices.Last(1) > Bars.LowPrices.Last(2))
            {

                var SLpips = (Symbol.Ask - Bars.LowPrices.Last(2)) / Symbol.PipSize;
                if (S1)
                {
                    ExecuteMarketOrder(TradeType.Buy, SymbolName, Symbol.QuantityToVolumeInUnits(volume), "Case1", SLpips, null);
                }


                ExecuteMarketOrder(TradeType.Buy, SymbolName, Symbol.QuantityToVolumeInUnits(volume), "Case1t", SLpips, null);
                Print("Open Case1");


            }



            if (ichimokusignal && Bars.ClosePrices.Last(1) > ichimoku.SenkouSpanA.Last(1) && Bars.ClosePrices.Last(1) > ichimoku.SenkouSpanB.Last(1) && Bars.ClosePrices.Last(1) > Bars.OpenPrices.Last(1) && Bars.HighPrices.Last(1) < Bars.HighPrices.Last(2) && Bars.LowPrices.Last(1) < Bars.LowPrices.Last(2))
            {

                var SLpips = (Symbol.Ask - Bars.LowPrices.Last(1)) / Symbol.PipSize;
                if (S1)
                {
                    ExecuteMarketOrder(TradeType.Buy, SymbolName, Symbol.QuantityToVolumeInUnits(volume), "Case2", SLpips, null);
                }
                ExecuteMarketOrder(TradeType.Buy, SymbolName, Symbol.QuantityToVolumeInUnits(volume), "Case2t", SLpips, null);
                Print("Open Case2");


            }



            if (ichimokusignal && Bars.ClosePrices.Last(1) < ichimoku.SenkouSpanA.Last(1) && Bars.ClosePrices.Last(1) < ichimoku.SenkouSpanB.Last(1) && Bars.ClosePrices.Last(1) < Bars.OpenPrices.Last(1) && Bars.HighPrices.Last(1) > Bars.HighPrices.Last(2) && Bars.LowPrices.Last(1) > Bars.LowPrices.Last(2))
            {

                var SLpips = (Bars.HighPrices.Last(1) - Symbol.Bid) / Symbol.PipSize;
                if (S1)
                {
                    ExecuteMarketOrder(TradeType.Sell, SymbolName, Symbol.QuantityToVolumeInUnits(volume), "Case3", SLpips, null);
                }
                ExecuteMarketOrder(TradeType.Sell, SymbolName, Symbol.QuantityToVolumeInUnits(volume), "Case3t", SLpips, null);
                Print("Open Case3");

            }



            if (ichimokusignal && Bars.ClosePrices.Last(1) < ichimoku.SenkouSpanA.Last(1) && Bars.ClosePrices.Last(1) < ichimoku.SenkouSpanB.Last(1) && Bars.ClosePrices.Last(1) < Bars.OpenPrices.Last(1) && Bars.HighPrices.Last(1) < Bars.HighPrices.Last(2) && Bars.LowPrices.Last(1) < Bars.LowPrices.Last(2))
            {

                var SLpips = (Bars.HighPrices.Last(2) - Symbol.Bid) / Symbol.PipSize;
                if (S1)
                {
                    ExecuteMarketOrder(TradeType.Sell, SymbolName, Symbol.QuantityToVolumeInUnits(volume), "Case4", SLpips, null);
                }
                ExecuteMarketOrder(TradeType.Sell, SymbolName, Symbol.QuantityToVolumeInUnits(volume), "Case4t", SLpips, null);
                Print("Open Case4");


            }

        }






    }
}
