using System;
using System.Linq;
using cAlgo.API;
using cAlgo.API.Indicators;
using cAlgo.API.Internals;
using cAlgo.Indicators;

namespace cAlgo.Robots
{
    [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
    public class tdema : Robot
    {
        [Parameter("TEMA Period", DefaultValue = 50)]
        public int Tema_Period { get; set; }

        [Parameter("DEMA Period", DefaultValue = 50)]
        public int Dema_Period { get; set; }

        [Parameter("Bars after crossing", DefaultValue = 1)]
        public int Bars_cross { get; set; }

        [Parameter("Maximum orders", DefaultValue = 5)]
        public int MaxOrders { get; set; }

       
        [Parameter("SL", DefaultValue = 50)]
        public double SL { get; set; }

        [Parameter("TP", DefaultValue = 25)]
        public double  TP { get; set; }

        [Parameter("Hour to start trading", DefaultValue = 8)]
        public int Hour_Start { get; set; }
        [Parameter("Hour to stop trading", DefaultValue = 18)]
        public int Hour_Stop { get; set; }

        [Parameter("martingale multiplier", DefaultValue = 1.5)]
        public int Martingale_Multiplier { get; set; }

        [Parameter("Balance % position", DefaultValue = 2)]
        public double Balance_per { get; set; }

        Tema _TEMA;
        DEMA _DEMA;

        protected override void OnStart()
        {
            _TEMA = Indicators.GetIndicator<Tema>(Tema_Period);
            _DEMA = Indicators.GetIndicator<DEMA>(Dema_Period);
        }

        private bool TimeCheck()
        {

            if (Server.Time.Hour >= Hour_Start && Server.Time.Hour < Hour_Stop)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        protected int GetVolume(double SL)
        {

            // x which is 1 = (balance * risk%)/(SL*pipvalue*1000) ROUND TO INT
            var x = Math.Round((Account.Balance * Balance_per) / (100 * SL * Symbol.PipValue * 1000));

            //Convert.ToInt32(double)
            //Print(x);
            return Convert.ToInt32(x * 1000);

        }

        protected override void OnBar()
        {
            var Opened_Orders = Positions.FindAll("TDEMA", SymbolName);

            if (_TEMA.Result.HasCrossedAbove(_DEMA.dema, Bars_cross) && Opened_Orders.Length < MaxOrders && TimeCheck())
            {
                ExecuteMarketOrder(TradeType.Buy, SymbolName, GetVolume(SL), "TDEMA", SL, TP);
            }
            if (_TEMA.Result.HasCrossedBelow(_DEMA.dema, Bars_cross) && Opened_Orders.Length < MaxOrders && TimeCheck())
            {
                ExecuteMarketOrder(TradeType.Buy, SymbolName, GetVolume(SL), "TDEMA", SL, TP);
            }
        }

        
    }
}
